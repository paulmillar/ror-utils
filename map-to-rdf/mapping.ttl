# Run with
#
#  RMLMapper -f functions.ttl -o output.ttl -s turtle -m mapping.ttl
#
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix grid: <http://www.grid.ac/ontology/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vivo: <http://vivoweb.org/ontology/core#> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix grel: <http://users.ugent.be/~bjdmeest/function/grel.ttl#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix ref:  <https://github.com/paulmillar/rml-extra-functions#> .
@prefix geo:  <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .

@base <http://example.com/base/> .

##
##  ADDRESSES
##

<AddressMap> a rr:TriplesMap;
  rml:logicalSource [
    #rml:source "test-data.json";
    rml:source "latest-ror-data.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.[*]"
  ];

  rr:subjectMap [
    rr:class grid:Address ;

    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:object ref:resolveDirectory ] ;
      rr:predicateObjectMap [
        rr:predicate ref:p_string_base_uri ;
        rr:objectMap [ rml:reference "id" ] ] ;
      rr:predicateObjectMap [
        rr:predicate ref:p_string_path ;
        rr:object "address-0" ]
    ] ;
    rr:termType rr:IRI
  ];

  rr:predicateObjectMap [
    rr:predicate owl:sameAs;
    rr:objectMap [
      rr:template "http://www.grid.ac/institutes/{external_ids.GRID.all}/address-0"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:countryCode;
    rr:objectMap [ rml:reference "country.country_code" ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:countryName;
    rr:objectMap [ rml:reference "country.country_name" ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:hasGeonamesCity;
    rr:objectMap [
      rr:termType rr:IRI;
      rr:template "http://sws.geonames.org/{addresses[0].geonames_city.id}/"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate geo:lat;
    rr:objectMap [
      rr:datatype xsd:float;
      rml:reference "addresses[0].lat"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate geo:long;
    rr:objectMap [
      rr:datatype xsd:float;
      rml:reference "addresses[0].lng"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:cityName;
    rr:objectMap [
      rml:reference "addresses[0].city"
    ]
  ].


##
##  ORGANISATIONS
##

<OrganisationMap> a rr:TriplesMap;

  rml:logicalSource [
    #rml:source "test-data.json";
    rml:source "latest-ror-data.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.[*]"
  ];

  #
  # Subject and Type
  #
  rr:subjectMap [
    rml:reference "id";
    rr:class foaf:Organization
  ];

  rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:objectMap [
      rr:termType rr:IRI;
      rr:template "http://www.grid.ac/ontology/{types[*]}"
    ]
  ];

  #
  # Explicit link to GRID
  #
  rr:predicateObjectMap [
    rr:predicate owl:sameAs;
    rr:objectMap [
      rr:template "http://www.grid.ac/institutes/{external_ids.GRID.all}"
    ]
  ];

  #
  # Names and aliases.
  #
  # TODO add support for "labels"
  #
  rr:predicateObjectMap [
    rr:predicate skos:prefLabel;
    rr:predicate rdfs:label;
    rr:objectMap [
      rml:reference "name"
   ]
  ];

  rr:predicateObjectMap [
    rr:predicate skos:altLabel;
    rr:objectMap [
      rml:reference "aliases[*]"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate vivo:abbreviation;
    rr:objectMap [
      rml:reference "acronyms[*]"
    ]
  ];

  #
  #  Significant dates.
  #
  rr:predicateObjectMap [
    rr:predicate grid:establishedYear;
    rr:objectMap [
      rr:datatype xsd:gYear;
      rml:reference "established"
    ]
  ];


  #
  #   Location information.
  #
  rr:predicateObjectMap [
    rr:predicate grid:hasAddress;

    rr:objectMap [
      fnml:functionValue [
        rr:predicateObjectMap [
          rr:predicate fno:executes ;
          rr:object ref:resolveDirectory ] ;
        rr:predicateObjectMap [
          rr:predicate ref:p_string_base_uri ;
          rr:objectMap [ rml:reference "id" ] ] ;
        rr:predicateObjectMap [
          rr:predicate ref:p_string_path ;
          rr:object "address-0" ]
      ]
    ]
  ];

  #
  # Various IDs.
  #
  # TODO: add the ROR id.
  #
  rr:predicateObjectMap [
    rr:predicate grid:isni;
    rr:objectMap [
      rml:reference "external_ids.ISNI.all[*]"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:crossrefFunderId;
    rr:objectMap [
      rml:reference "external_ids.FundRef.all[*]"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:hasWikidataId;
    rr:objectMap [
      rr:termType rr:IRI;
      rr:template "http://www.wikidata.org/entity/{external_ids.Wikidata.all[*]}"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:id;
    rr:objectMap [
      rml:reference "external_ids.GRID.all"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:ukprn;
    rr:objectMap [
      rml:reference "external_ids.UKPRN.all[*]"
    ]
  ];


  #
  # Relationships to other organisations.
  #
  # Note: the ROR data includes the relationship type "Other".  This
  #       is a relic from GRID.  Such relationships are not supported
  #       and will go away.
  #
  rr:predicateObjectMap [
    rr:predicate grid:hasRelated;
    rr:objectMap [
      rr:termType rr:IRI;
      rml:reference "relationships[?(@.type==\"Related\")].id"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:hasChild;
    rr:objectMap [
      rr:termType rr:IRI;
      rml:reference "relationships[?(@.type==\"Child\")].id"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate grid:hasParent;
    rr:objectMap [
      rr:termType rr:IRI;
      rml:reference "relationships[?(@.type==\"Parent\")].id"
    ]
  ];

  #
  # Links to web pages.
  #
  # Note: ROR currently uses a mixture of null and empty strings to
  #       represent missing 'wikipedia_url' values.  This is wrong and
  #       will be fixed by only using null values in some future
  #       release of ROR.
  #
  #       RMLMapper does not generate triples for any null values;
  #       however, it will try to map the empty string to a
  #       corresponding IRI.  This fails because an empty string is
  #       not a valid IRI.
  #
  #       While waiting for ROR to fix this inconsistency, use the
  #       'emptyToNull' function to handle any empty strings as if
  #       they were null.
  #
  rr:predicateObjectMap [
    rr:predicate grid:wikipediaPage;

    rr:objectMap [
      rr:termType rr:IRI;

      fnml:functionValue [
        rr:predicateObjectMap [
          rr:predicate fno:executes;
          rr:object ref:emptyToNull
        ];
        rr:predicateObjectMap [
          rr:predicate ref:p_string_in ;
          rr:objectMap [ rml:reference "wikipedia_url" ]
        ]
      ]
    ]
  ];


  # Note: ROR has occational links that contain a trailing whitespace
  #       character.  [TODO: add URL for upstream report here.]  As
  #       the space character is illegal within URL, this is a badly
  #       formed URL.  As a work-around, we use the 'trim' function.
  rr:predicateObjectMap [
    rr:predicate foaf:homepage;
    rr:objectMap [
      rr:termType rr:IRI;

      fnml:functionValue [
        rr:predicateObjectMap [
          rr:predicate fno:executes;
          rr:object ref:trim
        ];
        rr:predicateObjectMap [
          rr:predicate ref:p_string_in ;
          rr:objectMap [ rml:reference "links[*]" ]
        ]
      ]
    ]
  ].
